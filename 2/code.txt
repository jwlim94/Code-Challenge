/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null) return null;
        
        ArrayList<Integer> valueList = new ArrayList<>();
        getValToArray(valueList, l1);
        getValToArray(valueList, l2);
        
        Collections.sort(valueList);
        
        ListNode result = new ListNode();
        ListNode temp = new ListNode(-101);
        for (int value : valueList) {
            if (l1 != null && value == l1.val) {
                if (temp.val == -101) {
                    temp.val = value;
                    result = temp;
                    l1 = l1.next;
                }
                else {
                    ListNode add = new ListNode(value);
                    temp.next = add;
                    temp = temp.next;
                    l1 = l1.next;
                }
            }
            else if (l2 != null && value == l2.val) {
                if (temp.val == -101) {
                    temp.val = value;
                    result = temp;
                    l2 = l2.next;
                }
                else {
                    ListNode add = new ListNode(value);
                    temp.next = add;
                    temp = temp.next;
                    l2 = l2.next;
                }
            }
        }
        return result;
    }
    
    public void getValToArray(ArrayList<Integer> list, ListNode node) {
        ListNode temp = node;
        while (temp != null) {
            list.add(temp.val);
            temp = temp.next;
        }
    }
}